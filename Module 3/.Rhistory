q()
q()
sd(c(5,8,12))
which.min(c(4,1,6))
demo()
q()
q()
pisaTest = read.csv("pisa2009test.csv")
pisaTrain = read.csv("pisa2009train.csv")
nrow(pisaTrain)
tapply(pisaTrain$readingScore, pisaTrain$male, mean)
summary(pisaTrain)
pisaTrain = na.omit(pisaTrain)
pisaTest = na.omit(pisaTest)
str(pisaTrain)
summary(pisaTrain)
table(pisaTrain$grade)
table(pisaTrain$male)
table(pisaTrain$raceeth)
lmScore = lm(readingScore ~ ., data = pisaTrain)
summary(lmScore)
SSE = sum(lmScore$residuals^2)
RMSE = sqrt(SSE/nrow(pisaTrain))
redTest = predict(lmScore, newdata = pisaTest)
summary(redTest)
SSE = sum((redTest - pisaTest$readingScore)^2)
RMSE = sqrt(SSE/nrow(pisaTest))
mean(pisaTrain$readingScore)
SST = sum((mean(pisaTrain$readingScore)- pisaTest$readingScore)^2)
SST
testsetRsquare = 1 - SSE/SST
testsetRsquare
q()
wd()
lwd()
a
testsetRsquare = 1 - SSE/SST
testsetRsquare
fluTrain = read.csv("FluTrain.csv")
hist(fluTrain$ILI, breaks=100)
plot(log(fluTrain$ILI), fluTrain$Queries)
FluTrend1 = lm(log(ILI) ~ Queries, data = fluTrain)
summary(FluTrend1)
correlation = cor(fluTrain$Queries, log(fluTrain$ILI))
correlation^2
PredTest1 = exp(predict(FluTrend1, newdata=Flutest))
PredTest1[which(Flutest$Week == "2012-03-11 - 2012-03-17")]
PredTest1 = exp(predict(FluTrend1, newdata=Flutest))
Flutest = read.csv("FluTest.csv")
PredTest1 = exp(predict(FluTrend1, newdata=Flutest))
PredTest1 = exp(predict(FluTrend1, newdata=Flutest))
PredTest1[which(Flutest$Week == "2012-03-11 - 2012-03-17")]
Flutest$ILI[11]
(2.293422 - 2.187378)/2.293422
SSE = sum((PredTest1 - Flutest$ILI)^2)
RMSE = sqrt(SSE/nrow(Flutest))
RMSE
install.packages("zoo")
 library(zoo)
ILILag2 = lag(zoo(fluTrain$ILI), -2, na.pad=TRUE)
fluTrain$ILILag2 = coredata(ILILag2)
summary(fluTrain)
plot(log(fluTrain$ILILag2), log(fluTrain$ILI))
FluTrend2 = lm(log(ILI) ~ Queries + log(ILILag2), data = fluTrain)
summary(FluTrend2)
summary(FluTrend2)
ILILag2 = lag(zoo(Flutest$ILI), -2, na.pad=TRUE)
 Flutest$ILILag2 = coredata(ILILag2)
 summary(Flutest)
Flutest$ILILag2[1] = fluTrain$ILI[416]
 FluTest$ILILag2[2] = FluTrain$ILI[417]
 FluTest$ILILag2[2] = fluTrain$ILI[417]
summary(Flutest)
Flutest$ILILag2[1] = fluTrain$ILI[416]
Flutest$ILILag2[2] = fluTrain$ILI[417]
fluTrain$ILI[416]
fluTrain$ILI[417]
PredTest2 = exp(predict(FluTrend2, newdata=Flutest))
 SSE = sum((PredTest2 - Flutest$ILI)^2)
 RMSE = sqrt(SSE/nrow(Flutest))
 RMSE
statedata = read.csv("statedata.csv")
statedata = read.csv("statedata.csv")
plot(statedata$x, statedata$y)
tapply(statedata$HS.Grad, statedata$state.region, mean)
boxplot(statedata$Murder ~ statedata$state.region)
NortheastData = subset(statedata, state.region == "Northeast")
table(NortheastData$Murder, NortheastData$state.abb)
plot(statedata$Income, statedata$Life.Exp)
LinReg = lm(Life.Exp ~ Population + Murder + HS.Grad + Frost, data=statedata)
sort(predict(LinReg))
statedata$state.name[1]
which.min(statedata$Life.Exp)
statedata$state.name[40]
which.max(statedata$Life.Exp)
statedata$state.name[11]
statedata$state.name[47]
sort(abs(LinReg$residuals))
statedata$state.name[14]
statedata$state.name[11]
lantra = read.csv("elantra.csv")
elantra = read.csv("elantra.csv")
Question1
ElantraTest = subset(elantra, Year > 2012)
ElantraTrain = subset(elantra, Year <= 2012)
str(ElantraTrain)
model = lm(ElantraSales ~ Unemployment + Queries + CPI_energy + CPI_all, data=ElantraTrain)
 summary(model)
ElantrLM = lm(ElantraSales ~ Unemployment + Queries + CPI_energy + CPI_all + Month, data=ElantraTrain)
 summary(ElantrLM)
ElantraTrain$MonthFactor = as.factor(ElantraTrain$Month)
 ElantraTest$MonthFactor = as.factor(ElantraTest$Month)
 ElantrLM = lm(ElantraSales ~ Unemployment + Queries + CPI_energy + CPI_all + MonthFactor, data=ElantraTrain)
 summary(ElantrLM)
PredictTest = predict(ElantraLM, newdata=ElantraTest)
SSE = sum((PredictTest - ElantraTest$ElantraSales)^2)
SSE
PredictTest = predict(ElantraLM, newdata=ElantraTest)
summary(ElantraLM)
PredictTest = predict(ElantrLM, newdata=ElantraTest)
summary(ElantrLM)
PredictTest = predict(ElantrLM, newdata=ElantraTest)
SSE = sum((PredictTest - ElantraTest$ElantraSales)^2)
SSE
SST = sum((mean(ElantraTrain$ElantraSales) - ElantraTest$ElantraSales)^2)
SST
SST = sum((mean(ElantraTrain$ElantraSales) - ElantraTest$ElantraSales)^2)
SSE = sum((PredictTest - ElantraTest$ElantraSales)^2)
testset = 1-SST/SSE
testset
max(abs(PredictTest - ElantraTest$ElantraSales))
which.max(abs(PredictTest - ElantraTest$ElantraSales))
q()
