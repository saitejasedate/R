q()
q()
sd(c(5,8,12))
which.min(c(4,1,6))
demo()
q()
q()
songs = read.csv("songs.csv")
nrow(subset(songs,songs$artistname=="Michael Jackson"))
nrow(subset(songs, songs$year==2010))
MichaelJackson = subset(songs, songs$artistname=="Michael Jackson")
MichaelJackson$songtitle[MichaelJackson$Top10 == "1"]
str(songs)
table(songs$timesignature)
songs$songtitle[songs$tempo==max(songs$tempo)]
SongsTrain = subset(songs, songs$year<=2009)
SongsTest = subset(songs, songs$year==2010)
str(SongsTrain)
nonvars = c("year","songtitle","artistname","songID","artistID")
SongsTrain = SongsTrain[,!(names(SongsTrain)%in%nonvars)]
SongsTest = SongsTest[,!(names(SongsTest)%in%nonvars)]
SongsLog1 = glm(Top10 ~., data = SongsTrain, family=binomial)
summary(SongsLog1)
cor(SongsTrain$loudness, SongsTrain$energy)
SongsLog2 = glm(Top10 ~ . -loudness, data = SongsTrain, family=binomial)
summary(SongsLog2)
SongsLog3 = glm(Top10 ~ . -energy, data = SongsTrain, family=binomial)
summary(SongsLog3)
Predicttest = predict(SongsLog3, newdata = SongsTest, type="response")
table(SongsTest$Top10, Predicttest >= 0.45)
(309+19)/(309+5+40+19)
19/(40+19)
309/(309+5)
parole = read.csv("parole.csv")
str(parole)
table(parole$violator)
str(parole)
parole$state = as.factor(parole$state)
parole$multiple.offenses = as.factor(parole$multiple.offenses)
parole$crime = as.factor(parole$crime)
summary(parole$state)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
model1 = glm(violator ~., data = train, family=binomial)
summary(model1)
predictTest = predict(model1, type="response", newdata = test)
summary(predictTest)
table(test$violator, as.numeric(predictTest >= 0.5))
12/(12+11)
167/(167+12)
(167+12)/(167+24+11)
library(ROCR)
pred = prediction(predictTest, test$violator)
as.numeric(performance(pred, "auc")@y.values)
baseball = read.csv("baseball.csv")
str(baseball)
length(table(baseball$Year))
baseball = subset(baseball, baseball$Playoffs==1)
nrow(baseball)
table(baseball$Year)
PlayoffTable = table(baseball$Year)
names(PlayoffTable)
PlayoffTable[c("1990","2001")]
baseball$NumCompetitors = PlayoffTable[as.character(baseball$Year)]
table(baseball$NumCompetitors)
baseball$WorldSeries = as.numeric(baseball$RankPlayoffs == 1)
table(baseball$WorldSeries)
LogModel = glm(WorldSeries ~ Year + RA + RankSeason + NumCompetitors, data = baseball, family = binomial)
summary(LogModel)
cor(baseball[c("Year", "RA", "RankSeason", "NumCompetitors")])
q()
